% function including the known SIMs of the TMDD mechanism
% 
%  Inputs:  - zData: the data points 
%           - pars: model parameters (kon, koff, kel, ksyn, kdeg, kint)
%           - z2sol: according to which components of z to solve the SIM expressions (applies to explicit 
%             expressions, and to the implicit ones, when the fImpNR is activated)
%           - fImpNR: true (applies NR for solving numerically the implicit expressions), false (gives implicit Error)   
%
%  Outputs: - SIM approximations of the QSSA (for L,R,RL), PEA1, CSPL11, CSPL21, CSPR11, CSPR21, CSPRL11, CSPRL21 expressions
%
function [QSSAL_SIM, QSSAR_SIM, QSSARL_SIM, PEA_SIM, CSPL11_SIM, CSPL21_SIM, ...
                             CSPR11_SIM, CSPR21_SIM, CSPRL11_SIM, CSPRL21_SIM] = TMDD_knownSIMs(zData,pars,z2sol,fImpNR)
    % pars
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    %
    L = zData(1,:);
    R = zData(2,:);
    RL = zData(3,:);

 
    %% Solve SIM expressions for the fast variable (if Explicit)
    if z2sol == 1     % here for L
        % QSSAs
        QSSAL_SIM = (RL*koff)./(kel + R*kon);
        QSSAR_SIM = (ksyn - R*kdeg + RL*koff)./(R*kon);
        QSSARL_SIM = (RL*(kint + koff))./(R*kon);
        % PEA
        PEA_SIM = -(R*kdeg - ksyn + R*kel + R*koff - RL*koff + R.^2*kon - sqrt(R.^4*kon^2 + 2*R.^3*kdeg*kon + 2*R.^3*kel*kon + 2*R.^3*koff*kon + ...
            2*R.^2.*RL*koff*kon + R.^2*kdeg^2 + 2*R.^2*kdeg*kel + 2*R.^2*kdeg*koff + R.^2*kel^2 + 2*R.^2*kel*koff + R.^2*koff^2 - 2*R.^2*kon*ksyn - ...
            2*R.*RL*kdeg*koff - 2*R.*RL*kel*koff + 2*R.*RL*koff^2 + 4*kint*R.*RL*koff - 2*R*kdeg*ksyn - 2*R*kel*ksyn - 2*R*koff*ksyn + RL.^2*koff^2 + ...
            2*RL*koff*ksyn + ksyn^2))./(2*R*kon);  
        % CSP
        % CSPL: (1,1) and (2,1)
        CSPL11_SIM = -(kel^2 - kon*ksyn - sqrt(R.^4*kon^4 + 2*R.^3*kdeg*kon^3 + 4*R.^3*kel*kon^3 + 2*R.^3*koff*kon^3 + 2*R.^2.*RL*koff*kon^3 + R.^2*kdeg^2*kon^2 + ...
            4*R.^2*kdeg*kel*kon^2 + 2*R.^2*kdeg*koff*kon^2 + 6*R.^2*kel^2*kon^2 + 4*R.^2*kel*koff*kon^2 + R.^2*koff^2*kon^2 - 2*R.^2*kon^3*ksyn - ...
            2*R.*RL*kdeg*koff*kon^2 + 2*R.*RL*koff^2*kon^2 + 4*kint*R.*RL*koff*kon^2 + 2*R*kdeg*kel^2*kon - 2*R*kdeg*kon^2*ksyn + 4*R*kel^3*kon + ...
            2*R*kel^2*koff*kon - 4*R*kel*kon^2*ksyn - 2*R*koff*kon^2*ksyn + RL.^2*koff^2*kon^2 - 2*RL*kel^2*koff*kon + 2*RL*koff*kon^2*ksyn + kel^4 - ...
            2*kel^2*kon*ksyn + kon^2*ksyn^2) + R.^2*kon^2 + R*kdeg*kon + 2*R*kel*kon + R*koff*kon - RL*koff*kon)./(2*R*kon^2);
        if ~fImpNR
            CSPL21_SIM = ((R.^2*kon^2 + 2*R*kel*kon + L.*R*kon^2 + koff*R*kon + kel^2).*(- L.^3.*R*kel*kon^3 - 3*L.^2.*R.^3*kon^4 - 6*L.^2.*R.^2*kel*kon^3 - ...
                L.^2.*R.^2*koff*kon^3 - L.^2.*R.*RL*koff*kon^3 - 2*L.^2.*R*kdeg*kel*kon^2 - 3*L.^2.*R*kel^2*kon^2 - 2*L.^2.*R*kel*koff*kon^2 - ...
                L.^2.*R*kon^3*ksyn + L.^2.*RL*kel*koff*kon^2 + L.^2*kel*kon^2*ksyn - L.*R.^4*kon^4 - 2*L.*R.^3*kdeg*kon^3 - 4*L.*R.^3*kel*kon^3 - ...
                2*L.*R.^3*koff*kon^3 + 4*L.*R.^2.*RL*koff*kon^3 - 4*L.*R.^2*kdeg*kel*kon^2 - 6*L.*R.^2*kel^2*kon^2 - 4*L.*R.^2*kel*koff*kon^2 - ...
                L.*R.^2*kint*koff*kon^2 - L.*R.^2*koff^2*kon^2 + 2*L.*R.^2*kon^3*ksyn - L.*R.*RL*kdeg*koff*kon^2 + 6*L.*R.*RL*kel*koff*kon^2 - ...
                L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - L.*R*kdeg*kon^2*ksyn - 4*L.*R*kel^3*kon - 2*L.*R*kel^2*koff*kon - ...
                L.*R*kel*kint*koff*kon - L.*R*kel*koff^2*kon + 4*L.*R*kel*kon^2*ksyn + L.*RL.^2*koff^2*kon^2 + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kel^2*koff*kon + ...
                L.*RL*kel*kint*koff*kon + 2*L.*RL*kel*koff^2*kon + 2*L.*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + ...
                L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + R.^3.*RL*koff*kon^3 + R.^2.*RL*kdeg*koff*kon^2 + 3*R.^2.*RL*kel*koff*kon^2 + R.^2.*RL*kint*koff*kon^2 + ...
                2*R.^2.*RL*koff^2*kon^2 - R.*RL.^2*koff^2*kon^2 + R.*RL*kdeg*kel*koff*kon - R.*RL*kdeg*kint*koff*kon - R.*RL*kdeg*koff^2*kon + ...
                3*R.*RL*kel^2*koff*kon + 2*R.*RL*kel*kint*koff*kon + 3*R.*RL*kel*koff^2*kon + R.*RL*kint^2*koff*kon + 2*R.*RL*kint*koff^2*kon + ...
                R.*RL*koff^3*kon - R.*RL*koff*kon^2*ksyn - RL.^2*kel*koff^2*kon + RL.^2*kint*koff^2*kon + RL.^2*koff^3*kon + RL*kel^3*koff + ...
                RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + ...
                RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))./((kel + R*kon).*(kel^4 + R.^4*kon^4 + 3*L.*R.^3*kon^4 + 4*R.^3*kel*kon^3 + ...
                2*R.^3*koff*kon^3 + 6*R.^2*kel^2*kon^2 + R.^2*koff^2*kon^2 + 4*R*kel^3*kon + L.*R*kon^3*ksyn + R*kel*koff^2*kon + ...
                2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + 3*L.*R*kel^2*kon^2 + 6*L.*R.^2*kel*kon^3 + L.^2.*R*kel*kon^3 + L.*R.^2*koff*kon^3 + ...
                R.*RL*koff^2*kon^2 - R.^2.*RL*koff*kon^3 - R.^2*kdeg*koff*kon^2 + 4*R.^2*kel*koff*kon^2 + R.^2*kint*koff*kon^2 + R*kel*kint*koff*kon + ...
                L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kel*koff*kon^2 - R.*RL*kel*koff*kon^2));
        else
            CSPL21_SIM = zeros(size(L));   % same dimensions
            x_init = 1;   
            tic
            for i = 1:size(zData,2)
                CSPL21_SIM(:,i) = rootNR(@CSPL21_impL,[R(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPL21 for fast, took NR %e   \n',CPUend);
        end
        % CSPR: (1,1) and (2,1)
        CSPR11_SIM = -(2*R*kdeg - ksyn + R*kel + R*koff - RL*koff + R.^2*kon - sqrt(R.^4*kon^2 + 2*R.^3*kel*kon + 2*R.^3*koff*kon + 4*kdeg*R.^3*kon + ...
            2*R.^2.*RL*koff*kon + R.^2*kel^2 + 2*R.^2*kel*koff + 4*kdeg*R.^2*kel + R.^2*koff^2 + 4*kdeg*R.^2*koff - 2*R.^2*kon*ksyn - 2*R.*RL*kel*koff + ...
            2*R.*RL*koff^2 + 4*kint*R.*RL*koff - 2*R*kel*ksyn - 2*R*koff*ksyn + RL.^2*koff^2 + 2*RL*koff*ksyn + ksyn^2))./(2*R*kon);
        if ~fImpNR
            CSPR21_SIM = ((L.^2*kon^2 + 2*L*kdeg*kon + R.*L*kon^2 + koff*L*kon + kdeg^2).*(- L.^4.*R*kon^4 - 3*L.^3.*R.^2*kon^4 - 4*L.^3.*R*kdeg*kon^3 - ...
                2*L.^3.*R*kel*kon^3 - 2*L.^3.*R*koff*kon^3 + L.^3.*RL*koff*kon^3 + ksyn*L.^3*kon^3 - 6*L.^2.*R.^2*kdeg*kon^3 - L.^2.*R.^2*koff*kon^3 + ...
                4*L.^2.*R.*RL*koff*kon^3 - 6*L.^2.*R*kdeg^2*kon^2 - 4*L.^2.*R*kdeg*kel*kon^2 - 4*L.^2.*R*kdeg*koff*kon^2 - L.^2.*R*kint*koff*kon^2 - ...
                L.^2.*R*koff^2*kon^2 + 2*ksyn*L.^2.*R*kon^3 + 3*L.^2.*RL*kdeg*koff*kon^2 + L.^2.*RL*kel*koff*kon^2 + L.^2.*RL*kint*koff*kon^2 + ...
                2*L.^2.*RL*koff^2*kon^2 + 3*ksyn*L.^2*kdeg*kon^2 + ksyn*L.^2*kel*kon^2 + ksyn*L.^2*koff*kon^2 - L.*R.^3*kdeg*kon^3 - L.*R.^2.*RL*koff*kon^3 - ...
                3*L.*R.^2*kdeg^2*kon^2 - 2*L.*R.^2*kdeg*kel*kon^2 - 2*L.*R.^2*kdeg*koff*kon^2 + 6*L.*R.*RL*kdeg*koff*kon^2 - L.*R.*RL*kel*koff*kon^2 - ...
                4*L.*R*kdeg^3*kon - 2*L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg^2*koff*kon - L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - L.*R*kdeg*kint*koff*kon - ...
                L.*R*kdeg*koff^2*kon + 2*ksyn*L.*R*kdeg*kon^2 - L.*RL.^2*koff^2*kon^2 + 3*L.*RL*kdeg^2*koff*kon + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kdeg*kint*koff*kon + ...
                3*L.*RL*kdeg*koff^2*kon - L.*RL*kel*kint*koff*kon - L.*RL*kel*koff^2*kon + L.*RL*kint^2*koff*kon + 2*L.*RL*kint*koff^2*kon + L.*RL*koff^3*kon - ...
                ksyn*L.*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + R.^2.*RL*kdeg*koff*kon^2 + R.*RL.^2*koff^2*kon^2 + ...
                2*R.*RL*kdeg^2*koff*kon + R.*RL*kdeg*kel*koff*kon + R.*RL*kdeg*kint*koff*kon + 2*R.*RL*kdeg*koff^2*kon - R*kdeg^4 - RL.^2*kdeg*koff^2*kon + ...
                RL.^2*kint*koff^2*kon + RL.^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + ...
                RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))./((kdeg + L*kon).*(kdeg^4 + L.^4*kon^4 + 3*L.^3.*R*kon^4 + 4*L.^3*kdeg*kon^3 + 2*L.^3*koff*kon^3 - ...
                L.^2*kon^3*ksyn + 6*L.^2*kdeg^2*kon^2 + L.^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + 3*L.*R*kdeg^2*kon^2 + ...
                L.*R.^2*kdeg*kon^3 + 6*L.^2.*R*kdeg*kon^3 + L.^2.*R*koff*kon^3 + L.*RL*koff^2*kon^2 - L.^2.*RL*koff*kon^3 + 4*L.^2*kdeg*koff*kon^2 - L.^2*kel*koff*kon^2 + ...
                L.^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kdeg*koff*kon^2 - L.*RL*kdeg*koff*kon^2));
        else
            CSPR21_SIM = zeros(size(L));   % same dimensions
            x_init = 0.01;                                                 % <--------------- SENSITIVE TO INITIAL GUESS     
            tic
            for i = 1:size(zData,2)
                CSPR21_SIM(:,i) = rootNR(@CSPR21_impL,[R(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPR21 for fast, took NR %e   \n',CPUend);
        end        
        % CSPRL: (1,1) and (2,1)
        CSPRL11_SIM = -(R*kdeg - ksyn + R*kel + R*kint + R*koff - RL*koff + R.^2*kon - sqrt(R.^4*kon^2 + 2*R.^3*kdeg*kon + 2*R.^3*kel*kon + 2*R.^3*kint*kon + 2*R.^3*koff*kon + ...
            2*R.^2.*RL*koff*kon + R.^2*kdeg^2 + 2*R.^2*kdeg*kel + 2*R.^2*kdeg*kint + 2*R.^2*kdeg*koff + R.^2*kel^2 + 2*R.^2*kel*kint + 2*R.^2*kel*koff + R.^2*kint^2 + ...
            2*R.^2*kint*koff + R.^2*koff^2 - 2*R.^2*kon*ksyn - 2*R.*RL*kdeg*koff - 2*R.*RL*kel*koff + 4*R.*RL*kint^2 + 6*R.*RL*kint*koff + 2*R.*RL*koff^2 - 2*R*kdeg*ksyn - ...
            2*R*kel*ksyn - 2*R*kint*ksyn - 2*R*koff*ksyn + RL.^2*koff^2 + 2*RL*koff*ksyn + ksyn^2))./(2*R*kon);
        if ~fImpNR
            CSPRL21_SIM = ((2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon).*(L.^3.*R*kon^3 + 4*L.^2.*R.^2*kon^3 + 2*L.^2.*R*kdeg*kon^2 + 3*L.^2.*R*kel*kon^2 + ...
                L.^2.*R*kint*kon^2 + 2*L.^2.*R*koff*kon^2 - L.^2.*RL*koff*kon^2 - ksyn*L.^2*kon^2 + L.*R.^3*kon^3 + 3*L.*R.^2*kdeg*kon^2 + 2*L.*R.^2*kel*kon^2 + L.*R.^2*kint*kon^2 + ...
                2*L.*R.^2*koff*kon^2 - 6*L.*R.*RL*koff*kon^2 + L.*R*kdeg^2*kon + 2*L.*R*kdeg*kel*kon + L.*R*kdeg*kint*kon + L.*R*kdeg*koff*kon + L.*R*kel^2*kon + L.*R*kel*kint*kon + ...
                L.*R*kel*koff*kon + L.*R*kint^2*kon + 2*L.*R*kint*koff*kon + L.*R*koff^2*kon - 3*ksyn*L.*R*kon^2 - L.*RL*kdeg*koff*kon - 2*L.*RL*kel*koff*kon - 2*L.*RL*kint*koff*kon - ...
                2*L.*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ksyn*L*koff*kon - R.^2.*RL*koff*kon^2 - 2*R.*RL*kdeg*koff*kon - R.*RL*kel*koff*kon - ...
                2*R.*RL*kint*koff*kon - 2*R.*RL*koff^2*kon + 2*RL.^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + 2*ksyn*RL*koff*kon))./((kint + ...
                koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L.^2*koff*kon^2 + R.^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + ...
                4*L.*R*koff*kon^2 + L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon));
        else
            CSPRL21_SIM = zeros(size(L));   % same dimensions
            x_init = 1;           
            tic
            for i = 1:size(zData,2)
                CSPRL21_SIM(:,i) = rootNR(@CSPRL21_impL,[R(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPRL21 for fast, took NR %e   \n',CPUend);
        end
    elseif z2sol == 2     % here for R
        % QSSAs
        QSSAL_SIM = -(L*kel - RL*koff)./(L*kon); 
        QSSAR_SIM = (ksyn + RL*koff)./(kdeg + L*kon);  
        QSSARL_SIM = (RL*(kint + koff))./(L*kon); 
        % PEA
        PEA_SIM = -(L*kdeg + L*kel + L*koff - RL*koff + L.^2*kon - sqrt(L.^4*kon^2 + 2*L.^3*kdeg*kon + 2*L.^3*kel*kon + ...
            2*L.^3*koff*kon + 2*L.^2.*RL*koff*kon + L.^2*kdeg^2 + 2*L.^2*kdeg*kel + 2*L.^2*kdeg*koff + L.^2*kel^2 + ...
            2*L.^2*kel*koff + L.^2*koff^2 + 4*ksyn*L.^2*kon - 2*L.*RL*kdeg*koff - 2*L.*RL*kel*koff + 2*L.*RL*koff^2 + ...
            4*kint*L.*RL*koff + RL.^2*koff^2))./(2*L*kon);
        % CSP
        % CSPL: (1,1) and (2,1)
        CSPL11_SIM = -(L*kdeg + 2*L*kel + L*koff - RL*koff + L.^2*kon - sqrt(L.^4*kon^2 + 2*L.^3*kdeg*kon + ...
            2*L.^3*koff*kon + 4*kel*L.^3*kon + 2*L.^2.*RL*koff*kon + L.^2*kdeg^2 + 2*L.^2*kdeg*koff + 4*kel*L.^2*kdeg + ...
            L.^2*koff^2 + 4*kel*L.^2*koff + 4*ksyn*L.^2*kon - 2*L.*RL*kdeg*koff + 2*L.*RL*koff^2 + 4*kint*L.*RL*koff + ...
            RL.^2*koff^2))./(2*L*kon);
        if ~fImpNR                                                                                                                                                                                   
            CSPL21_SIM = ((R.^2*kon^2 + 2*R*kel*kon + L.*R*kon^2 + koff*R*kon + kel^2).*(- L.^3.*R*kel*kon^3 - 3*L.^2.*R.^3*kon^4 - ...
                6*L.^2.*R.^2*kel*kon^3 - L.^2.*R.^2*koff*kon^3 - L.^2.*R.*RL*koff*kon^3 - 2*L.^2.*R*kdeg*kel*kon^2 - ...
                3*L.^2.*R*kel^2*kon^2 - 2*L.^2.*R*kel*koff*kon^2 - L.^2.*R*kon^3*ksyn + L.^2.*RL*kel*koff*kon^2 + ...
                L.^2*kel*kon^2*ksyn - L.*R.^4*kon^4 - 2*L.*R.^3*kdeg*kon^3 - 4*L.*R.^3*kel*kon^3 - 2*L.*R.^3*koff*kon^3 + ...
                4*L.*R.^2.*RL*koff*kon^3 - 4*L.*R.^2*kdeg*kel*kon^2 - 6*L.*R.^2*kel^2*kon^2 - 4*L.*R.^2*kel*koff*kon^2 - ...
                L.*R.^2*kint*koff*kon^2 - L.*R.^2*koff^2*kon^2 + 2*L.*R.^2*kon^3*ksyn - L.*R.*RL*kdeg*koff*kon^2 + ...
                6*L.*R.*RL*kel*koff*kon^2 - L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - ...
                L.*R*kdeg*kon^2*ksyn - 4*L.*R*kel^3*kon - 2*L.*R*kel^2*koff*kon - L.*R*kel*kint*koff*kon - ...
                L.*R*kel*koff^2*kon + 4*L.*R*kel*kon^2*ksyn + L.*RL.^2*koff^2*kon^2 + L.*RL*kdeg*kel*koff*kon + ...
                2*L.*RL*kel^2*koff*kon + L.*RL*kel*kint*koff*kon + 2*L.*RL*kel*koff^2*kon + 2*L.*RL*koff*kon^2*ksyn + ...
                L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + ...
                R.^3.*RL*koff*kon^3 + R.^2.*RL*kdeg*koff*kon^2 + 3*R.^2.*RL*kel*koff*kon^2 + R.^2.*RL*kint*koff*kon^2 + ...
                2*R.^2.*RL*koff^2*kon^2 - R.*RL.^2*koff^2*kon^2 + R.*RL*kdeg*kel*koff*kon - R.*RL*kdeg*kint*koff*kon - ...
                R.*RL*kdeg*koff^2*kon + 3*R.*RL*kel^2*koff*kon + 2*R.*RL*kel*kint*koff*kon + 3*R.*RL*kel*koff^2*kon + ...
                R.*RL*kint^2*koff*kon + 2*R.*RL*kint*koff^2*kon + R.*RL*koff^3*kon - R.*RL*koff*kon^2*ksyn - ...
                RL.^2*kel*koff^2*kon + RL.^2*kint*koff^2*kon + RL.^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + ...
                RL*kel^2*koff^2 + RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + ...
                RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))./((kel + R*kon).*(kel^4 + R.^4*kon^4 + 3*L.*R.^3*kon^4 + ...
                4*R.^3*kel*kon^3 + 2*R.^3*koff*kon^3 + 6*R.^2*kel^2*kon^2 + R.^2*koff^2*kon^2 + 4*R*kel^3*kon + ...
                L.*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + 3*L.*R*kel^2*kon^2 + ...
                6*L.*R.^2*kel*kon^3 + L.^2.*R*kel*kon^3 + L.*R.^2*koff*kon^3 + R.*RL*koff^2*kon^2 - R.^2.*RL*koff*kon^3 - ...
                R.^2*kdeg*koff*kon^2 + 4*R.^2*kel*koff*kon^2 + R.^2*kint*koff*kon^2 + R*kel*kint*koff*kon + ...
                L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kel*koff*kon^2 - R.*RL*kel*koff*kon^2));
        else
            CSPL21_SIM = zeros(size(R));   % same dimensions
            x_init = 0.01;                                                 %% <-------- IT IS VERY TRICKY TO FIND THE CORRECT INITIAL GUESS
            tic
            for i = 1:size(zData,2)
                %x_init = R(1,i);
                CSPL21_SIM(:,i) = rootNR(@CSPL21_impR,[L(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPL21 for fast, took NR %e   \n',CPUend);
        end
        % CSPR: (1,1) and (2,1)
        CSPR11_SIM = -(kdeg^2 - sqrt(L.^4*kon^4 + 4*L.^3*kdeg*kon^3 + 2*L.^3*kel*kon^3 + 2*L.^3*koff*kon^3 + 2*L.^2.*RL*koff*kon^3 + ...
            6*L.^2*kdeg^2*kon^2 + 4*L.^2*kdeg*kel*kon^2 + 4*L.^2*kdeg*koff*kon^2 + L.^2*kel^2*kon^2 + 2*L.^2*kel*koff*kon^2 + ...
            L.^2*koff^2*kon^2 + 4*ksyn*L.^2*kon^3 - 2*L.*RL*kel*koff*kon^2 + 2*L.*RL*koff^2*kon^2 + 4*kint*L.*RL*koff*kon^2 + ...
            4*L*kdeg^3*kon + 2*L*kdeg^2*kel*kon + 2*L*kdeg^2*koff*kon + 4*ksyn*L*kdeg*kon^2 + RL.^2*koff^2*kon^2 - ...
            2*RL*kdeg^2*koff*kon + kdeg^4) + L.^2*kon^2 + 2*L*kdeg*kon + L*kel*kon + L*koff*kon - ...
            RL*koff*kon)./(2*L*kon^2);
        if ~fImpNR
            CSPR21_SIM = ((L.^2*kon^2 + 2*L*kdeg*kon + R.*L*kon^2 + koff*L*kon + kdeg^2).*(- L.^4.*R*kon^4 - 3*L.^3.*R.^2*kon^4 - ...
                4*L.^3.*R*kdeg*kon^3 - 2*L.^3.*R*kel*kon^3 - 2*L.^3.*R*koff*kon^3 + L.^3.*RL*koff*kon^3 + ksyn*L.^3*kon^3 - ...
                6*L.^2.*R.^2*kdeg*kon^3 - L.^2.*R.^2*koff*kon^3 + 4*L.^2.*R.*RL*koff*kon^3 - 6*L.^2.*R*kdeg^2*kon^2 - ...
                4*L.^2.*R*kdeg*kel*kon^2 - 4*L.^2.*R*kdeg*koff*kon^2 - L.^2.*R*kint*koff*kon^2 - L.^2.*R*koff^2*kon^2 + ...
                2*ksyn*L.^2.*R*kon^3 + 3*L.^2.*RL*kdeg*koff*kon^2 + L.^2.*RL*kel*koff*kon^2 + L.^2.*RL*kint*koff*kon^2 + ...
                2*L.^2.*RL*koff^2*kon^2 + 3*ksyn*L.^2*kdeg*kon^2 + ksyn*L.^2*kel*kon^2 + ksyn*L.^2*koff*kon^2 - ...
                L.*R.^3*kdeg*kon^3 - L.*R.^2.*RL*koff*kon^3 - 3*L.*R.^2*kdeg^2*kon^2 - 2*L.*R.^2*kdeg*kel*kon^2 - ...
                2*L.*R.^2*kdeg*koff*kon^2 + 6*L.*R.*RL*kdeg*koff*kon^2 - L.*R.*RL*kel*koff*kon^2 - 4*L.*R*kdeg^3*kon - ...
                2*L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg^2*koff*kon - L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - ...
                L.*R*kdeg*kint*koff*kon - L.*R*kdeg*koff^2*kon + 2*ksyn*L.*R*kdeg*kon^2 - L.*RL.^2*koff^2*kon^2 + ...
                3*L.*RL*kdeg^2*koff*kon + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kdeg*kint*koff*kon + 3*L.*RL*kdeg*koff^2*kon - ...
                L.*RL*kel*kint*koff*kon - L.*RL*kel*koff^2*kon + L.*RL*kint^2*koff*kon + 2*L.*RL*kint*koff^2*kon + ...
                L.*RL*koff^3*kon - ksyn*L.*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + ...
                R.^2.*RL*kdeg*koff*kon^2 + R.*RL.^2*koff^2*kon^2 + 2*R.*RL*kdeg^2*koff*kon + R.*RL*kdeg*kel*koff*kon + ...
                R.*RL*kdeg*kint*koff*kon + 2*R.*RL*kdeg*koff^2*kon - R*kdeg^4 - RL.^2*kdeg*koff^2*kon + RL.^2*kint*koff^2*kon + ...
                RL.^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + ...
                2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))./((kdeg + L*kon).*(kdeg^4 + ...
                L.^4*kon^4 + 3*L.^3.*R*kon^4 + 4*L.^3*kdeg*kon^3 + 2*L.^3*koff*kon^3 - L.^2*kon^3*ksyn + 6*L.^2*kdeg^2*kon^2 + ...
                L.^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + ...
                3*L.*R*kdeg^2*kon^2 + L.*R.^2*kdeg*kon^3 + 6*L.^2.*R*kdeg*kon^3 + L.^2.*R*koff*kon^3 + L.*RL*koff^2*kon^2 - ...
                L.^2.*RL*koff*kon^3 + 4*L.^2*kdeg*koff*kon^2 - L.^2*kel*koff*kon^2 + L.^2*kint*koff*kon^2 + ...
                L*kdeg*kint*koff*kon + L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kdeg*koff*kon^2 - ...
                L.*RL*kdeg*koff*kon^2));
        else
            CSPR21_SIM = zeros(size(R));   % same dimensions
            x_init = 1; 
            tic
            for i = 1:size(zData,2)
                CSPR21_SIM(:,i) = rootNR(@CSPR21_impR,[L(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPR21 for fast, took NR %e   \n',CPUend);
        end
        % CSPRL: (1,1) and (2,1)
        CSPRL11_SIM = -(L*kdeg + L*kel + L*kint + L*koff - RL*koff + L.^2*kon - sqrt(L.^4*kon^2 + 2*L.^3*kdeg*kon + 2*L.^3*kel*kon + ...
            2*L.^3*kint*kon + 2*L.^3*koff*kon + 2*L.^2.*RL*koff*kon + L.^2*kdeg^2 + 2*L.^2*kdeg*kel + 2*L.^2*kdeg*kint + ...
            2*L.^2*kdeg*koff + L.^2*kel^2 + 2*L.^2*kel*kint + 2*L.^2*kel*koff + L.^2*kint^2 + 2*L.^2*kint*koff + ...
            L.^2*koff^2 + 4*ksyn*L.^2*kon - 2*L.*RL*kdeg*koff - 2*L.*RL*kel*koff + 4*L.*RL*kint^2 + 6*L.*RL*kint*koff + ...
            2*L.*RL*koff^2 + RL.^2*koff^2))./(2*L*kon);
        if ~fImpNR
            CSPRL21_SIM = ((2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon).*(L.^3.*R*kon^3 + 4*L.^2.*R.^2*kon^3 + ...
                2*L.^2.*R*kdeg*kon^2 + 3*L.^2.*R*kel*kon^2 + L.^2.*R*kint*kon^2 + 2*L.^2.*R*koff*kon^2 - L.^2.*RL*koff*kon^2 - ...
                ksyn*L.^2*kon^2 + L.*R.^3*kon^3 + 3*L.*R.^2*kdeg*kon^2 + 2*L.*R.^2*kel*kon^2 + L.*R.^2*kint*kon^2 + ...
                2*L.*R.^2*koff*kon^2 - 6*L.*R.*RL*koff*kon^2 + L.*R*kdeg^2*kon + 2*L.*R*kdeg*kel*kon + L.*R*kdeg*kint*kon + ...
                L.*R*kdeg*koff*kon + L.*R*kel^2*kon + L.*R*kel*kint*kon + L.*R*kel*koff*kon + L.*R*kint^2*kon + ...
                2*L.*R*kint*koff*kon + L.*R*koff^2*kon - 3*ksyn*L.*R*kon^2 - L.*RL*kdeg*koff*kon - 2*L.*RL*kel*koff*kon - ...
                2*L.*RL*kint*koff*kon - 2*L.*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ...
                ksyn*L*koff*kon - R.^2.*RL*koff*kon^2 - 2*R.*RL*kdeg*koff*kon - R.*RL*kel*koff*kon - 2*R.*RL*kint*koff*kon - ...
                2*R.*RL*koff^2*kon + 2*RL.^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + ...
                2*ksyn*RL*koff*kon))./((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L.^2*koff*kon^2 + ...
                R.^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L.*R*koff*kon^2 + ...
                L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon));
        else
            CSPRL21_SIM = zeros(size(R));   % same dimensions
            x_init = 1; 
            tic
            for i = 1:size(zData,2)
                CSPRL21_SIM(:,i) = rootNR(@CSPRL21_impR,[L(1,i) ; RL(1,i)],pars,x_init);
            end
            CPUend = toc;
            fprintf('Solving CSPRL21 for fast, took NR %e   \n',CPUend);
        end
    end



end

%%% Newton-Raphson iterative scheme %%%  <---------- function functions
function xNR = rootNR(funHandle,ySlow,pars,x0)
    tol = 1e-6;
    dx = 100;
    iter = 0;
    while (abs(dx)>tol) && (iter<10)
        [fun, dfun_dx] = funHandle(x0,ySlow,pars);
        dx = -fun/dfun_dx;
        % Newton Update
        x0 = x0 + dx;
        iter = iter + 1;
        if iter == 10
            error('I want more iterations, Newton said');
        end
    end
    xNR = x0;

end


%%% FUNCTION handlers to use in NR %%%
%
%
%

% CSPL21 solved for L
function [CSPL21_SIM, CSPL21_SIM_dL] = CSPL21_impL(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    L = xFast;
    R = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPL21_SIM = ((R.^2*kon^2 + 2*R*kel*kon + L.*R*kon^2 + koff*R*kon + kel^2).*(- L.^3.*R*kel*kon^3 - 3*L.^2.*R.^3*kon^4 - 6*L.^2.*R.^2*kel*kon^3 - ...
            L.^2.*R.^2*koff*kon^3 - L.^2.*R.*RL*koff*kon^3 - 2*L.^2.*R*kdeg*kel*kon^2 - 3*L.^2.*R*kel^2*kon^2 - 2*L.^2.*R*kel*koff*kon^2 - ...
            L.^2.*R*kon^3*ksyn + L.^2.*RL*kel*koff*kon^2 + L.^2*kel*kon^2*ksyn - L.*R.^4*kon^4 - 2*L.*R.^3*kdeg*kon^3 - 4*L.*R.^3*kel*kon^3 - ...
            2*L.*R.^3*koff*kon^3 + 4*L.*R.^2.*RL*koff*kon^3 - 4*L.*R.^2*kdeg*kel*kon^2 - 6*L.*R.^2*kel^2*kon^2 - 4*L.*R.^2*kel*koff*kon^2 - ...
            L.*R.^2*kint*koff*kon^2 - L.*R.^2*koff^2*kon^2 + 2*L.*R.^2*kon^3*ksyn - L.*R.*RL*kdeg*koff*kon^2 + 6*L.*R.*RL*kel*koff*kon^2 - ...
            L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - L.*R*kdeg*kon^2*ksyn - 4*L.*R*kel^3*kon - 2*L.*R*kel^2*koff*kon - ...
            L.*R*kel*kint*koff*kon - L.*R*kel*koff^2*kon + 4*L.*R*kel*kon^2*ksyn + L.*RL.^2*koff^2*kon^2 + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kel^2*koff*kon + ...
            L.*RL*kel*kint*koff*kon + 2*L.*RL*kel*koff^2*kon + 2*L.*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + ...
            L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + R.^3.*RL*koff*kon^3 + R.^2.*RL*kdeg*koff*kon^2 + 3*R.^2.*RL*kel*koff*kon^2 + R.^2.*RL*kint*koff*kon^2 + ...
            2*R.^2.*RL*koff^2*kon^2 - R.*RL.^2*koff^2*kon^2 + R.*RL*kdeg*kel*koff*kon - R.*RL*kdeg*kint*koff*kon - R.*RL*kdeg*koff^2*kon + ...
            3*R.*RL*kel^2*koff*kon + 2*R.*RL*kel*kint*koff*kon + 3*R.*RL*kel*koff^2*kon + R.*RL*kint^2*koff*kon + 2*R.*RL*kint*koff^2*kon + ...
            R.*RL*koff^3*kon - R.*RL*koff*kon^2*ksyn - RL.^2*kel*koff^2*kon + RL.^2*kint*koff^2*kon + RL.^2*koff^3*kon + RL*kel^3*koff + ...
            RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + ...
            RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))./((kel + R*kon).*(kel^4 + R.^4*kon^4 + 3*L.*R.^3*kon^4 + 4*R.^3*kel*kon^3 + ...
            2*R.^3*koff*kon^3 + 6*R.^2*kel^2*kon^2 + R.^2*koff^2*kon^2 + 4*R*kel^3*kon + L.*R*kon^3*ksyn + R*kel*koff^2*kon + ...
            2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + 3*L.*R*kel^2*kon^2 + 6*L.*R.^2*kel*kon^3 + L.^2.*R*kel*kon^3 + L.*R.^2*koff*kon^3 + ...
            R.*RL*koff^2*kon^2 - R.^2.*RL*koff*kon^3 - R.^2*kdeg*koff*kon^2 + 4*R.^2*kel*koff*kon^2 + R.^2*kint*koff*kon^2 + R*kel*kint*koff*kon + ...
            L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kel*koff*kon^2 - R.*RL*kel*koff*kon^2));
    %
    CSPL21_SIM_dL = (R*kon^2*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - 6*L^2*R^2*kel*kon^3 - L^2*R^2*koff*kon^3 - L^2*R*RL*koff*kon^3 - ...
        2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - 2*L^2*R*kel*koff*kon^2 - L^2*R*kon^3*ksyn + L^2*RL*kel*koff*kon^2 + L^2*kel*kon^2*ksyn - ...
        L*R^4*kon^4 - 2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - 2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - 4*L*R^2*kdeg*kel*kon^2 - ...
        6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - L*R*RL*kdeg*koff*kon^2 + ...
        6*L*R*RL*kel*koff*kon^2 - L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kon^2*ksyn - 4*L*R*kel^3*kon - ...
        2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + 4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + L*RL*kdeg*kel*koff*kon + ...
        2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + 2*L*RL*kel*koff^2*kon + 2*L*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + ...
        2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + 3*R^2*RL*kel*koff*kon^2 + ...
        R^2*RL*kint*koff*kon^2 + 2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - R*RL*kdeg*kint*koff*kon - ...
        R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + 3*R*RL*kel*koff^2*kon + R*RL*kint^2*koff*kon + ...
        2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - RL^2*kel*koff^2*kon + RL^2*kint*koff^2*kon + RL^2*koff^3*kon + ...
        RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + ...
        RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))/((kel + R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + ...
        6*R^2*kel^2*kon^2 + R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + ...
        3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - R^2*kdeg*koff*kon^2 + ...
        4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - ...
        R*RL*kel*koff*kon^2)) - ((R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + koff*R*kon + kel^2)*(3*L^2*R*kel*kon^3 + 6*L*R^3*kon^4 + 12*L*R^2*kel*kon^3 + ...
        2*L*R^2*koff*kon^3 + 2*L*R*RL*koff*kon^3 + 4*L*R*kdeg*kel*kon^2 + 6*L*R*kel^2*kon^2 + 4*L*R*kel*koff*kon^2 + 2*L*R*kon^3*ksyn - ...
        2*L*RL*kel*koff*kon^2 - 2*L*kel*kon^2*ksyn + R^4*kon^4 + 2*R^3*kdeg*kon^3 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 - 4*R^2*RL*koff*kon^3 + ...
        4*R^2*kdeg*kel*kon^2 + 6*R^2*kel^2*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*koff^2*kon^2 + kint*R^2*koff*kon^2 - 2*R^2*kon^3*ksyn + ...
        R*RL*kdeg*koff*kon^2 - 6*R*RL*kel*koff*kon^2 + R*kdeg^2*kel*kon + 2*R*kdeg*kel^2*kon + R*kdeg*kel*koff*kon + R*kdeg*kon^2*ksyn + ...
        4*R*kel^3*kon + 2*R*kel^2*koff*kon + R*kel*koff^2*kon + kint*R*kel*koff*kon - 4*R*kel*kon^2*ksyn - RL^2*koff^2*kon^2 - RL*kdeg*kel*koff*kon - ...
        2*RL*kel^2*koff*kon - 2*RL*kel*koff^2*kon - kint*RL*kel*koff*kon - 2*RL*koff*kon^2*ksyn - kdeg*kel*kon*ksyn + kel^4 - 2*kel^2*kon*ksyn - ...
        kel*koff*kon*ksyn - kon^2*ksyn^2))/((kel + R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + ...
        R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + 3*L*R*kel^2*kon^2 + ...
        6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + ...
        R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2)) - ...
        (R*kon^2*(R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + koff*R*kon + kel^2)*(kdeg*kel + 2*kel*koff + kon*ksyn + 3*kel^2 + 3*R^2*kon^2 + 2*L*kel*kon + ...
        6*R*kel*kon + R*koff*kon + RL*koff*kon)*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - 6*L^2*R^2*kel*kon^3 - L^2*R^2*koff*kon^3 - ...
        L^2*R*RL*koff*kon^3 - 2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - 2*L^2*R*kel*koff*kon^2 - L^2*R*kon^3*ksyn + L^2*RL*kel*koff*kon^2 + ...
        L^2*kel*kon^2*ksyn - L*R^4*kon^4 - 2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - 2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - ...
        4*L*R^2*kdeg*kel*kon^2 - 6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - ...
        L*R*RL*kdeg*koff*kon^2 + 6*L*R*RL*kel*koff*kon^2 - L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kon^2*ksyn - ...
        4*L*R*kel^3*kon - 2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + 4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + ...
        L*RL*kdeg*kel*koff*kon + 2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + 2*L*RL*kel*koff^2*kon + 2*L*RL*koff*kon^2*ksyn + ...
        L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + ...
        3*R^2*RL*kel*koff*kon^2 + R^2*RL*kint*koff*kon^2 + 2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - ...
        R*RL*kdeg*kint*koff*kon - R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + 3*R*RL*kel*koff^2*kon + ...
        R*RL*kint^2*koff*kon + 2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - RL^2*kel*koff^2*kon + RL^2*kint*koff^2*kon + ...
        RL^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - ...
        RL*kel*koff*kon*ksyn + RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))/((kel + R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + ...
        2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + ...
        R*koff*kon^2*ksyn + 3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - ...
        R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + ...
        2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2)^2);
end

% CSPR21 solved for L
function [CSPR21_SIM, CSPR21_SIM_dL] = CSPR21_impL(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    L = xFast;
    R = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPR21_SIM = ((L.^2*kon^2 + 2*L*kdeg*kon + R.*L*kon^2 + koff*L*kon + kdeg^2).*(- L.^4.*R*kon^4 - 3*L.^3.*R.^2*kon^4 - 4*L.^3.*R*kdeg*kon^3 - ...
        2*L.^3.*R*kel*kon^3 - 2*L.^3.*R*koff*kon^3 + L.^3.*RL*koff*kon^3 + ksyn*L.^3*kon^3 - 6*L.^2.*R.^2*kdeg*kon^3 - L.^2.*R.^2*koff*kon^3 + ...
        4*L.^2.*R.*RL*koff*kon^3 - 6*L.^2.*R*kdeg^2*kon^2 - 4*L.^2.*R*kdeg*kel*kon^2 - 4*L.^2.*R*kdeg*koff*kon^2 - L.^2.*R*kint*koff*kon^2 - ...
        L.^2.*R*koff^2*kon^2 + 2*ksyn*L.^2.*R*kon^3 + 3*L.^2.*RL*kdeg*koff*kon^2 + L.^2.*RL*kel*koff*kon^2 + L.^2.*RL*kint*koff*kon^2 + ...
        2*L.^2.*RL*koff^2*kon^2 + 3*ksyn*L.^2*kdeg*kon^2 + ksyn*L.^2*kel*kon^2 + ksyn*L.^2*koff*kon^2 - L.*R.^3*kdeg*kon^3 - L.*R.^2.*RL*koff*kon^3 - ...
        3*L.*R.^2*kdeg^2*kon^2 - 2*L.*R.^2*kdeg*kel*kon^2 - 2*L.*R.^2*kdeg*koff*kon^2 + 6*L.*R.*RL*kdeg*koff*kon^2 - L.*R.*RL*kel*koff*kon^2 - ...
        4*L.*R*kdeg^3*kon - 2*L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg^2*koff*kon - L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - L.*R*kdeg*kint*koff*kon - ...
        L.*R*kdeg*koff^2*kon + 2*ksyn*L.*R*kdeg*kon^2 - L.*RL.^2*koff^2*kon^2 + 3*L.*RL*kdeg^2*koff*kon + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kdeg*kint*koff*kon + ...
        3*L.*RL*kdeg*koff^2*kon - L.*RL*kel*kint*koff*kon - L.*RL*kel*koff^2*kon + L.*RL*kint^2*koff*kon + 2*L.*RL*kint*koff^2*kon + L.*RL*koff^3*kon - ...
        ksyn*L.*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + R.^2.*RL*kdeg*koff*kon^2 + R.*RL.^2*koff^2*kon^2 + ...
        2*R.*RL*kdeg^2*koff*kon + R.*RL*kdeg*kel*koff*kon + R.*RL*kdeg*kint*koff*kon + 2*R.*RL*kdeg*koff^2*kon - R*kdeg^4 - RL.^2*kdeg*koff^2*kon + ...
        RL.^2*kint*koff^2*kon + RL.^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + ...
        RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))./((kdeg + L*kon).*(kdeg^4 + L.^4*kon^4 + 3*L.^3.*R*kon^4 + 4*L.^3*kdeg*kon^3 + 2*L.^3*koff*kon^3 - ...
        L.^2*kon^3*ksyn + 6*L.^2*kdeg^2*kon^2 + L.^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + 3*L.*R*kdeg^2*kon^2 + ...
        L.*R.^2*kdeg*kon^3 + 6*L.^2.*R*kdeg*kon^3 + L.^2.*R*koff*kon^3 + L.*RL*koff^2*kon^2 - L.^2.*RL*koff*kon^3 + 4*L.^2*kdeg*koff*kon^2 - L.^2*kel*koff*kon^2 + ...
        L.^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kdeg*koff*kon^2 - L.*RL*kdeg*koff*kon^2));
    %
    CSPR21_SIM_dL = (kon*(2*kdeg + koff + 2*L*kon + R*kon)*(-L^4*R*kon^4 - 3*L^3*R^2*kon^4 - 4*L^3*R*kdeg*kon^3 - 2*L^3*R*kel*kon^3 - 2*L^3*R*koff*kon^3 + ...
        L^3*RL*koff*kon^3 + ksyn*L^3*kon^3 - 6*L^2*R^2*kdeg*kon^3 - L^2*R^2*koff*kon^3 + 4*L^2*R*RL*koff*kon^3 - 6*L^2*R*kdeg^2*kon^2 - 4*L^2*R*kdeg*kel*kon^2 - ...
        4*L^2*R*kdeg*koff*kon^2 - L^2*R*kint*koff*kon^2 - L^2*R*koff^2*kon^2 + 2*ksyn*L^2*R*kon^3 + 3*L^2*RL*kdeg*koff*kon^2 + L^2*RL*kel*koff*kon^2 + ...
        L^2*RL*kint*koff*kon^2 + 2*L^2*RL*koff^2*kon^2 + 3*ksyn*L^2*kdeg*kon^2 + ksyn*L^2*kel*kon^2 + ksyn*L^2*koff*kon^2 - L*R^3*kdeg*kon^3 - L*R^2*RL*koff*kon^3 - ...
        3*L*R^2*kdeg^2*kon^2 - 2*L*R^2*kdeg*kel*kon^2 - 2*L*R^2*kdeg*koff*kon^2 + 6*L*R*RL*kdeg*koff*kon^2 - L*R*RL*kel*koff*kon^2 - 4*L*R*kdeg^3*kon - ...
        2*L*R*kdeg^2*kel*kon - 2*L*R*kdeg^2*koff*kon - L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kint*koff*kon - L*R*kdeg*koff^2*kon + 2*ksyn*L*R*kdeg*kon^2 - ...
        L*RL^2*koff^2*kon^2 + 3*L*RL*kdeg^2*koff*kon + L*RL*kdeg*kel*koff*kon + 2*L*RL*kdeg*kint*koff*kon + 3*L*RL*kdeg*koff^2*kon - L*RL*kel*kint*koff*kon - ...
        L*RL*kel*koff^2*kon + L*RL*kint^2*koff*kon + 2*L*RL*kint*koff^2*kon + L*RL*koff^3*kon - ksyn*L*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ...
        ksyn*L*kdeg*koff*kon + R^2*RL*kdeg*koff*kon^2 + R*RL^2*koff^2*kon^2 + 2*R*RL*kdeg^2*koff*kon + R*RL*kdeg*kel*koff*kon + R*RL*kdeg*kint*koff*kon + 2*R*RL*kdeg*koff^2*kon - ...
        R*kdeg^4 - RL^2*kdeg*koff^2*kon + RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + ...
        2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))/((kdeg + L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + ...
        2*L^3*koff*kon^3 - L^2*kon^3*ksyn + 6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + ...
        3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + ...
        L^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)) - (kon*(L^2*kon^2 + 2*L*kdeg*kon + ...
        R*L*kon^2 + koff*L*kon + kdeg^2)*(4*L^3*R*kon^3 + 9*L^2*R^2*kon^3 + 12*L^2*R*kdeg*kon^2 + 6*L^2*R*kel*kon^2 + 6*L^2*R*koff*kon^2 - 3*L^2*RL*koff*kon^2 - 3*ksyn*L^2*kon^2 + ...
        12*L*R^2*kdeg*kon^2 + 2*L*R^2*koff*kon^2 - 8*L*R*RL*koff*kon^2 + 12*L*R*kdeg^2*kon + 8*L*R*kdeg*kel*kon + 8*L*R*kdeg*koff*kon + 2*L*R*kint*koff*kon + 2*L*R*koff^2*kon - ...
        4*ksyn*L*R*kon^2 - 6*L*RL*kdeg*koff*kon - 2*L*RL*kel*koff*kon - 2*L*RL*kint*koff*kon - 4*L*RL*koff^2*kon - 6*ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - 2*ksyn*L*koff*kon + ...
        R^3*kdeg*kon^2 + R^2*RL*koff*kon^2 + 3*R^2*kdeg^2*kon + 2*R^2*kdeg*kel*kon + 2*R^2*kdeg*koff*kon - 6*R*RL*kdeg*koff*kon + R*RL*kel*koff*kon + 4*R*kdeg^3 + 2*R*kdeg^2*kel + ...
        2*R*kdeg^2*koff + R*kdeg*kel^2 + R*kdeg*kel*koff + R*kdeg*kint*koff + R*kdeg*koff^2 - 2*ksyn*R*kdeg*kon + RL^2*koff^2*kon - 3*RL*kdeg^2*koff - RL*kdeg*kel*koff - ...
        2*RL*kdeg*kint*koff - 3*RL*kdeg*koff^2 + RL*kel*kint*koff + RL*kel*koff^2 - RL*kint^2*koff - 2*RL*kint*koff^2 - RL*koff^3 + ksyn*RL*koff*kon - 3*ksyn*kdeg^2 - ksyn*kdeg*kel - ...
        ksyn*kdeg*koff))/((kdeg + L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + 6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + ...
        4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + ...
        L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + L^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + ...
        2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)) - (kon*(L^2*kon^2 + 2*L*kdeg*kon + R*L*kon^2 + koff*L*kon + kdeg^2)*(- L^4*R*kon^4 - 3*L^3*R^2*kon^4 - 4*L^3*R*kdeg*kon^3 - ...
        2*L^3*R*kel*kon^3 - 2*L^3*R*koff*kon^3 + L^3*RL*koff*kon^3 + ksyn*L^3*kon^3 - 6*L^2*R^2*kdeg*kon^3 - L^2*R^2*koff*kon^3 + 4*L^2*R*RL*koff*kon^3 - 6*L^2*R*kdeg^2*kon^2 - ...
        4*L^2*R*kdeg*kel*kon^2 - 4*L^2*R*kdeg*koff*kon^2 - L^2*R*kint*koff*kon^2 - L^2*R*koff^2*kon^2 + 2*ksyn*L^2*R*kon^3 + 3*L^2*RL*kdeg*koff*kon^2 + L^2*RL*kel*koff*kon^2 + ...
        L^2*RL*kint*koff*kon^2 + 2*L^2*RL*koff^2*kon^2 + 3*ksyn*L^2*kdeg*kon^2 + ksyn*L^2*kel*kon^2 + ksyn*L^2*koff*kon^2 - L*R^3*kdeg*kon^3 - L*R^2*RL*koff*kon^3 - ...
        3*L*R^2*kdeg^2*kon^2 - 2*L*R^2*kdeg*kel*kon^2 - 2*L*R^2*kdeg*koff*kon^2 + 6*L*R*RL*kdeg*koff*kon^2 - L*R*RL*kel*koff*kon^2 - 4*L*R*kdeg^3*kon - 2*L*R*kdeg^2*kel*kon - ...
        2*L*R*kdeg^2*koff*kon - L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kint*koff*kon - L*R*kdeg*koff^2*kon + 2*ksyn*L*R*kdeg*kon^2 - L*RL^2*koff^2*kon^2 + ...
        3*L*RL*kdeg^2*koff*kon + L*RL*kdeg*kel*koff*kon + 2*L*RL*kdeg*kint*koff*kon + 3*L*RL*kdeg*koff^2*kon - L*RL*kel*kint*koff*kon - L*RL*kel*koff^2*kon + L*RL*kint^2*koff*kon + ...
        2*L*RL*kint*koff^2*kon + L*RL*koff^3*kon - ksyn*L*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + R^2*RL*kdeg*koff*kon^2 + R*RL^2*koff^2*kon^2 + ...
        2*R*RL*kdeg^2*koff*kon + R*RL*kdeg*kel*koff*kon + R*RL*kdeg*kint*koff*kon + 2*R*RL*kdeg*koff^2*kon - R*kdeg^4 - RL^2*kdeg*koff^2*kon + RL^2*kint*koff^2*kon + RL^2*koff^3*kon + ...
        RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))/((kdeg + L*kon)^2*(kdeg^4 + ...
        L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + 6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - ...
        L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + ...
        L^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)) - (kon*(L^2*kon^2 + 2*L*kdeg*kon + R*L*kon^2 + ...
        koff*L*kon + kdeg^2)*(kdeg*koff^2 + 2*kdeg^2*koff + 4*kdeg^3 + 4*L^3*kon^3 + 9*L^2*R*kon^3 + 12*L^2*kdeg*kon^2 + 6*L^2*koff*kon^2 + R^2*kdeg*kon^2 + kdeg*kint*koff - kdeg*kon*ksyn + ...
        12*L*kdeg^2*kon + 2*L*koff^2*kon - 2*L*kon^2*ksyn + 3*R*kdeg^2*kon + RL*koff^2*kon + 12*L*R*kdeg*kon^2 + 2*L*R*koff*kon^2 - 2*L*RL*koff*kon^2 + R*RL*koff*kon^2 + 8*L*kdeg*koff*kon - ...
        2*L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*kel*kon + 2*R*kdeg*koff*kon - RL*kdeg*koff*kon)*(- L^4*R*kon^4 - 3*L^3*R^2*kon^4 - 4*L^3*R*kdeg*kon^3 - 2*L^3*R*kel*kon^3 - 2*L^3*R*koff*kon^3 + ...
        L^3*RL*koff*kon^3 + ksyn*L^3*kon^3 - 6*L^2*R^2*kdeg*kon^3 - L^2*R^2*koff*kon^3 + 4*L^2*R*RL*koff*kon^3 - 6*L^2*R*kdeg^2*kon^2 - 4*L^2*R*kdeg*kel*kon^2 - 4*L^2*R*kdeg*koff*kon^2 - ...
        L^2*R*kint*koff*kon^2 - L^2*R*koff^2*kon^2 + 2*ksyn*L^2*R*kon^3 + 3*L^2*RL*kdeg*koff*kon^2 + L^2*RL*kel*koff*kon^2 + L^2*RL*kint*koff*kon^2 + 2*L^2*RL*koff^2*kon^2 + 3*ksyn*L^2*kdeg*kon^2 + ...
        ksyn*L^2*kel*kon^2 + ksyn*L^2*koff*kon^2 - L*R^3*kdeg*kon^3 - L*R^2*RL*koff*kon^3 - 3*L*R^2*kdeg^2*kon^2 - 2*L*R^2*kdeg*kel*kon^2 - 2*L*R^2*kdeg*koff*kon^2 + 6*L*R*RL*kdeg*koff*kon^2 - ...
        L*R*RL*kel*koff*kon^2 - 4*L*R*kdeg^3*kon - 2*L*R*kdeg^2*kel*kon - 2*L*R*kdeg^2*koff*kon - L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kint*koff*kon - L*R*kdeg*koff^2*kon + ...
        2*ksyn*L*R*kdeg*kon^2 - L*RL^2*koff^2*kon^2 + 3*L*RL*kdeg^2*koff*kon + L*RL*kdeg*kel*koff*kon + 2*L*RL*kdeg*kint*koff*kon + 3*L*RL*kdeg*koff^2*kon - L*RL*kel*kint*koff*kon - ...
        L*RL*kel*koff^2*kon + L*RL*kint^2*koff*kon + 2*L*RL*kint*koff^2*kon + L*RL*koff^3*kon - ksyn*L*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + ...
        R^2*RL*kdeg*koff*kon^2 + R*RL^2*koff^2*kon^2 + 2*R*RL*kdeg^2*koff*kon + R*RL*kdeg*kel*koff*kon + R*RL*kdeg*kint*koff*kon + 2*R*RL*kdeg*koff^2*kon - R*kdeg^4 - RL^2*kdeg*koff^2*kon + ...
        RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ...
        ksyn*kdeg^3))/((kdeg + L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + 6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + ...
        L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + ...
        4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + L^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)^2);
end

% CSPRL21 solved for L
function [CSPRL21_SIM, CSPRL21_SIM_dL] = CSPRL21_impL(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    L = xFast;
    R = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPRL21_SIM = ((2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon).*(L.^3.*R*kon^3 + 4*L.^2.*R.^2*kon^3 + 2*L.^2.*R*kdeg*kon^2 + 3*L.^2.*R*kel*kon^2 + ...
        L.^2.*R*kint*kon^2 + 2*L.^2.*R*koff*kon^2 - L.^2.*RL*koff*kon^2 - ksyn*L.^2*kon^2 + L.*R.^3*kon^3 + 3*L.*R.^2*kdeg*kon^2 + 2*L.*R.^2*kel*kon^2 + L.*R.^2*kint*kon^2 + ...
        2*L.*R.^2*koff*kon^2 - 6*L.*R.*RL*koff*kon^2 + L.*R*kdeg^2*kon + 2*L.*R*kdeg*kel*kon + L.*R*kdeg*kint*kon + L.*R*kdeg*koff*kon + L.*R*kel^2*kon + L.*R*kel*kint*kon + ...
        L.*R*kel*koff*kon + L.*R*kint^2*kon + 2*L.*R*kint*koff*kon + L.*R*koff^2*kon - 3*ksyn*L.*R*kon^2 - L.*RL*kdeg*koff*kon - 2*L.*RL*kel*koff*kon - 2*L.*RL*kint*koff*kon - ...
        2*L.*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ksyn*L*koff*kon - R.^2.*RL*koff*kon^2 - 2*R.*RL*kdeg*koff*kon - R.*RL*kel*koff*kon - ...
        2*R.*RL*kint*koff*kon - 2*R.*RL*koff^2*kon + 2*RL.^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + 2*ksyn*RL*koff*kon))./((kint + ...
        koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L.^2*koff*kon^2 + R.^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + ...
        4*L.*R*koff*kon^2 + L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon));
    %
    CSPRL21_SIM_dL = (kon*(2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon)*(3*L^2*R*kon^2 + 8*L*R^2*kon^2 + 4*L*R*kdeg*kon + 6*L*R*kel*kon + 2*L*R*kint*kon + ...
        4*L*R*koff*kon - 2*RL*L*koff*kon - 2*ksyn*L*kon + R^3*kon^2 + 3*R^2*kdeg*kon + 2*R^2*kel*kon + R^2*kint*kon + 2*R^2*koff*kon + R*kdeg^2 + 2*R*kdeg*kel + R*kdeg*kint + ...
        R*kdeg*koff + R*kel^2 + R*kel*kint + R*kel*koff + R*kint^2 + 2*R*kint*koff + R*koff^2 - 6*RL*R*koff*kon - 3*ksyn*R*kon - RL*kdeg*koff - ksyn*kdeg - 2*RL*kel*koff - ...
        2*ksyn*kel - 2*RL*kint*koff - ksyn*kint - 2*RL*koff^2 - ksyn*koff))/((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L^2*koff*kon^2 + R^2*koff*kon^2 - ...
        koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L*R*koff*kon^2 + L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + ...
        R*kel*koff*kon + 2*R*kint*koff*kon)) + (koff*kon*(L^3*R*kon^3 + 4*L^2*R^2*kon^3 + 2*L^2*R*kdeg*kon^2 + 3*L^2*R*kel*kon^2 + L^2*R*kint*kon^2 + 2*L^2*R*koff*kon^2 - ...
        L^2*RL*koff*kon^2 - ksyn*L^2*kon^2 + L*R^3*kon^3 + 3*L*R^2*kdeg*kon^2 + 2*L*R^2*kel*kon^2 + L*R^2*kint*kon^2 + 2*L*R^2*koff*kon^2 - 6*L*R*RL*koff*kon^2 + ...
        L*R*kdeg^2*kon + 2*L*R*kdeg*kel*kon + L*R*kdeg*kint*kon + L*R*kdeg*koff*kon + L*R*kel^2*kon + L*R*kel*kint*kon + L*R*kel*koff*kon + L*R*kint^2*kon + 2*L*R*kint*koff*kon + ...
        L*R*koff^2*kon - 3*ksyn*L*R*kon^2 - L*RL*kdeg*koff*kon - 2*L*RL*kel*koff*kon - 2*L*RL*kint*koff*kon - 2*L*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ...
        ksyn*L*kint*kon - ksyn*L*koff*kon - R^2*RL*koff*kon^2 - 2*R*RL*kdeg*koff*kon - R*RL*kel*koff*kon - 2*R*RL*kint*koff*kon - 2*R*RL*koff^2*kon + 2*RL^2*koff^2*kon - ...
        RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + 2*ksyn*RL*koff*kon))/((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L^2*koff*kon^2 + ...
        R^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L*R*koff*kon^2 + L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + ...
        R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon)) - (koff*kon*(2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon)*(kdeg + kel + 2*kint + 2*koff + 2*L*kon + ...
        4*R*kon)*(L^3*R*kon^3 + 4*L^2*R^2*kon^3 + 2*L^2*R*kdeg*kon^2 + 3*L^2*R*kel*kon^2 + L^2*R*kint*kon^2 + 2*L^2*R*koff*kon^2 - L^2*RL*koff*kon^2 - ksyn*L^2*kon^2 + L*R^3*kon^3 + ...
        3*L*R^2*kdeg*kon^2 + 2*L*R^2*kel*kon^2 + L*R^2*kint*kon^2 + 2*L*R^2*koff*kon^2 - 6*L*R*RL*koff*kon^2 + L*R*kdeg^2*kon + 2*L*R*kdeg*kel*kon + L*R*kdeg*kint*kon + L*R*kdeg*koff*kon + ...
        L*R*kel^2*kon + L*R*kel*kint*kon + L*R*kel*koff*kon + L*R*kint^2*kon + 2*L*R*kint*koff*kon + L*R*koff^2*kon - 3*ksyn*L*R*kon^2 - L*RL*kdeg*koff*kon - 2*L*RL*kel*koff*kon - ...
        2*L*RL*kint*koff*kon - 2*L*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ksyn*L*koff*kon - R^2*RL*koff*kon^2 - 2*R*RL*kdeg*koff*kon - R*RL*kel*koff*kon - ...
        2*R*RL*kint*koff*kon - 2*R*RL*koff^2*kon + 2*RL^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + 2*ksyn*RL*koff*kon))/((kint + koff)*(3*kint*koff^2 + ...
        3*kint^2*koff + kint^3 + koff^3 + L^2*koff*kon^2 + R^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L*R*koff*kon^2 + L*kdeg*koff*kon + ...
        L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon)^2); 
end

% CSPL21 solved for R
function [CSPL21_SIM, CSPL21_SIM_dR] = CSPL21_impR(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    R = xFast;
    L = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPL21_SIM = ((R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + koff*R*kon + kel^2)*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - ...
        6*L^2*R^2*kel*kon^3 - L^2*R^2*koff*kon^3 - L^2*R*RL*koff*kon^3 - 2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - ...
        2*L^2*R*kel*koff*kon^2 - L^2*R*kon^3*ksyn + L^2*RL*kel*koff*kon^2 + L^2*kel*kon^2*ksyn - L*R^4*kon^4 - ...
        2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - 2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - 4*L*R^2*kdeg*kel*kon^2 - ...
        6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - ...
        L*R*RL*kdeg*koff*kon^2 + 6*L*R*RL*kel*koff*kon^2 - L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - ...
        L*R*kdeg*kon^2*ksyn - 4*L*R*kel^3*kon - 2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + ...
        4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + L*RL*kdeg*kel*koff*kon + 2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + ...
        2*L*RL*kel*koff^2*kon + 2*L*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + ...
        L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + 3*R^2*RL*kel*koff*kon^2 + ...
        R^2*RL*kint*koff*kon^2 + 2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - ...
        R*RL*kdeg*kint*koff*kon - R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + ...
        3*R*RL*kel*koff^2*kon + R*RL*kint^2*koff*kon + 2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - ...
        RL^2*kel*koff^2*kon + RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + ...
        RL*kel*kint^2*koff + 2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + RL*kint*koff*kon*ksyn + ...
        RL*koff^2*kon*ksyn))/((kel + R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + ...
        6*R^2*kel^2*kon^2 + R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + ...
        R*koff*kon^2*ksyn + 3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - ...
        R^2*RL*koff*kon^3 - R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + ...
        L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2));
    %
    CSPL21_SIM_dR = (kon*(2*kel + koff + L*kon + 2*R*kon)*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - 6*L^2*R^2*kel*kon^3 - ...
        L^2*R^2*koff*kon^3 - L^2*R*RL*koff*kon^3 - 2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - 2*L^2*R*kel*koff*kon^2 - ...
        L^2*R*kon^3*ksyn + L^2*RL*kel*koff*kon^2 + L^2*kel*kon^2*ksyn - L*R^4*kon^4 - 2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - ...
        2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - 4*L*R^2*kdeg*kel*kon^2 - 6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - ...
        L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - L*R*RL*kdeg*koff*kon^2 + 6*L*R*RL*kel*koff*kon^2 - ...
        L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kon^2*ksyn - 4*L*R*kel^3*kon - ...
        2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + 4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + ...
        L*RL*kdeg*kel*koff*kon + 2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + 2*L*RL*kel*koff^2*kon + ...
        2*L*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + ...
        R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + 3*R^2*RL*kel*koff*kon^2 + R^2*RL*kint*koff*kon^2 + ...
        2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - R*RL*kdeg*kint*koff*kon - ...
        R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + 3*R*RL*kel*koff^2*kon + ...
        R*RL*kint^2*koff*kon + 2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - RL^2*kel*koff^2*kon + ...
        RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + ...
        2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))/((kel + ...
        R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + ...
        R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + ...
        3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - ...
        R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + ...
        L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2)) - (kon*(R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + ...
        koff*R*kon + kel^2)*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - 6*L^2*R^2*kel*kon^3 - L^2*R^2*koff*kon^3 - ...
        L^2*R*RL*koff*kon^3 - 2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - 2*L^2*R*kel*koff*kon^2 - L^2*R*kon^3*ksyn + ...
        L^2*RL*kel*koff*kon^2 + L^2*kel*kon^2*ksyn - L*R^4*kon^4 - 2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - ...
        2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - 4*L*R^2*kdeg*kel*kon^2 - 6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - ...
        L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - L*R*RL*kdeg*koff*kon^2 + 6*L*R*RL*kel*koff*kon^2 - ...
        L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kon^2*ksyn - 4*L*R*kel^3*kon - ...
        2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + 4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + ...
        L*RL*kdeg*kel*koff*kon + 2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + 2*L*RL*kel*koff^2*kon + ...
        2*L*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + ...
        L*kon^2*ksyn^2 + R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + 3*R^2*RL*kel*koff*kon^2 + R^2*RL*kint*koff*kon^2 + ...
        2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - R*RL*kdeg*kint*koff*kon - ...
        R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + 3*R*RL*kel*koff^2*kon + ...
        R*RL*kint^2*koff*kon + 2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - RL^2*kel*koff^2*kon + ...
        RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + ...
        2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))/((kel + ...
        R*kon)^2*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + ...
        R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + ...
        3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - ...
        R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + ...
        L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2)) - (kon*(R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + ...
        koff*R*kon + kel^2)*(L^3*kel*kon^2 + 9*L^2*R^2*kon^3 + 12*L^2*R*kel*kon^2 + 2*L^2*R*koff*kon^2 + L^2*RL*koff*kon^2 + ...
        2*L^2*kdeg*kel*kon + 3*L^2*kel^2*kon + 2*L^2*kel*koff*kon + ksyn*L^2*kon^2 + 4*L*R^3*kon^3 + 6*L*R^2*kdeg*kon^2 + ...
        12*L*R^2*kel*kon^2 + 6*L*R^2*koff*kon^2 - 8*L*R*RL*koff*kon^2 + 8*L*R*kdeg*kel*kon + 12*L*R*kel^2*kon + ...
        8*L*R*kel*koff*kon + 2*L*R*kint*koff*kon + 2*L*R*koff^2*kon - 4*ksyn*L*R*kon^2 + L*RL*kdeg*koff*kon - ...
        6*L*RL*kel*koff*kon + L*kdeg^2*kel + 2*L*kdeg*kel^2 + L*kdeg*kel*koff + ksyn*L*kdeg*kon + 4*L*kel^3 + ...
        2*L*kel^2*koff + L*kel*kint*koff + L*kel*koff^2 - 4*ksyn*L*kel*kon - 3*R^2*RL*koff*kon^2 - 2*R*RL*kdeg*koff*kon - ...
        6*R*RL*kel*koff*kon - 2*R*RL*kint*koff*kon - 4*R*RL*koff^2*kon + RL^2*koff^2*kon - RL*kdeg*kel*koff + ...
        RL*kdeg*kint*koff + RL*kdeg*koff^2 - 3*RL*kel^2*koff - 2*RL*kel*kint*koff - 3*RL*kel*koff^2 - RL*kint^2*koff - ...
        2*RL*kint*koff^2 - RL*koff^3 + ksyn*RL*koff*kon))/((kel + R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + ...
        4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + ...
        R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + 3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + ...
        L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + ...
        R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - ...
        R*RL*kel*koff*kon^2)) - (kon*(R^2*kon^2 + 2*R*kel*kon + L*R*kon^2 + koff*R*kon + kel^2)*(kel*koff^2 + 2*kel^2*koff + ...
        4*kel^3 + 4*R^3*kon^3 + 9*L*R^2*kon^3 + L^2*kel*kon^2 + 12*R^2*kel*kon^2 + 6*R^2*koff*kon^2 + kel*kint*koff + ...
        koff*kon*ksyn + 3*L*kel^2*kon + L*kon^2*ksyn + 12*R*kel^2*kon + 2*R*koff^2*kon + RL*koff^2*kon + 12*L*R*kel*kon^2 + ...
        2*L*R*koff*kon^2 + L*RL*koff*kon^2 - 2*R*RL*koff*kon^2 + L*kdeg*kel*kon + 2*L*kel*koff*kon - 2*R*kdeg*koff*kon + ...
        8*R*kel*koff*kon + 2*R*kint*koff*kon - RL*kel*koff*kon)*(- L^3*R*kel*kon^3 - 3*L^2*R^3*kon^4 - 6*L^2*R^2*kel*kon^3 - ...
        L^2*R^2*koff*kon^3 - L^2*R*RL*koff*kon^3 - 2*L^2*R*kdeg*kel*kon^2 - 3*L^2*R*kel^2*kon^2 - 2*L^2*R*kel*koff*kon^2 - ...
        L^2*R*kon^3*ksyn + L^2*RL*kel*koff*kon^2 + L^2*kel*kon^2*ksyn - L*R^4*kon^4 - 2*L*R^3*kdeg*kon^3 - 4*L*R^3*kel*kon^3 - ...
        2*L*R^3*koff*kon^3 + 4*L*R^2*RL*koff*kon^3 - 4*L*R^2*kdeg*kel*kon^2 - 6*L*R^2*kel^2*kon^2 - 4*L*R^2*kel*koff*kon^2 - ...
        L*R^2*kint*koff*kon^2 - L*R^2*koff^2*kon^2 + 2*L*R^2*kon^3*ksyn - L*R*RL*kdeg*koff*kon^2 + 6*L*R*RL*kel*koff*kon^2 - ...
        L*R*kdeg^2*kel*kon - 2*L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - L*R*kdeg*kon^2*ksyn - 4*L*R*kel^3*kon - ...
        2*L*R*kel^2*koff*kon - L*R*kel*kint*koff*kon - L*R*kel*koff^2*kon + 4*L*R*kel*kon^2*ksyn + L*RL^2*koff^2*kon^2 + ...
        L*RL*kdeg*kel*koff*kon + 2*L*RL*kel^2*koff*kon + L*RL*kel*kint*koff*kon + 2*L*RL*kel*koff^2*kon + ...
        2*L*RL*koff*kon^2*ksyn + L*kdeg*kel*kon*ksyn - L*kel^4 + 2*L*kel^2*kon*ksyn + L*kel*koff*kon*ksyn + L*kon^2*ksyn^2 + ...
        R^3*RL*koff*kon^3 + R^2*RL*kdeg*koff*kon^2 + 3*R^2*RL*kel*koff*kon^2 + R^2*RL*kint*koff*kon^2 + ...
        2*R^2*RL*koff^2*kon^2 - R*RL^2*koff^2*kon^2 + R*RL*kdeg*kel*koff*kon - R*RL*kdeg*kint*koff*kon - ...
        R*RL*kdeg*koff^2*kon + 3*R*RL*kel^2*koff*kon + 2*R*RL*kel*kint*koff*kon + 3*R*RL*kel*koff^2*kon + ...
        R*RL*kint^2*koff*kon + 2*R*RL*kint*koff^2*kon + R*RL*koff^3*kon - R*RL*koff*kon^2*ksyn - RL^2*kel*koff^2*kon + ...
        RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kel^3*koff + RL*kel^2*kint*koff + RL*kel^2*koff^2 + RL*kel*kint^2*koff + ...
        2*RL*kel*kint*koff^2 + RL*kel*koff^3 - RL*kel*koff*kon*ksyn + RL*kint*koff*kon*ksyn + RL*koff^2*kon*ksyn))/((kel + ...
        R*kon)*(kel^4 + R^4*kon^4 + 3*L*R^3*kon^4 + 4*R^3*kel*kon^3 + 2*R^3*koff*kon^3 + 6*R^2*kel^2*kon^2 + ...
        R^2*koff^2*kon^2 + 4*R*kel^3*kon + L*R*kon^3*ksyn + R*kel*koff^2*kon + 2*R*kel^2*koff*kon + R*koff*kon^2*ksyn + ...
        3*L*R*kel^2*kon^2 + 6*L*R^2*kel*kon^3 + L^2*R*kel*kon^3 + L*R^2*koff*kon^3 + R*RL*koff^2*kon^2 - R^2*RL*koff*kon^3 - ...
        R^2*kdeg*koff*kon^2 + 4*R^2*kel*koff*kon^2 + R^2*kint*koff*kon^2 + R*kel*kint*koff*kon + L*R*RL*koff*kon^3 + ...
        L*R*kdeg*kel*kon^2 + 2*L*R*kel*koff*kon^2 - R*RL*kel*koff*kon^2)^2);
end

% CSPR21 solved for R
function [CSPR21_SIM, CSPR21_SIM_dR] = CSPR21_impR(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    R = xFast;
    L = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPR21_SIM = ((L.^2*kon^2 + 2*L*kdeg*kon + R.*L*kon^2 + koff*L*kon + kdeg^2).*(- L.^4.*R*kon^4 - 3*L.^3.*R.^2*kon^4 - ...
            4*L.^3.*R*kdeg*kon^3 - 2*L.^3.*R*kel*kon^3 - 2*L.^3.*R*koff*kon^3 + L.^3.*RL*koff*kon^3 + ksyn*L.^3*kon^3 - ...
            6*L.^2.*R.^2*kdeg*kon^3 - L.^2.*R.^2*koff*kon^3 + 4*L.^2.*R.*RL*koff*kon^3 - 6*L.^2.*R*kdeg^2*kon^2 - ...
            4*L.^2.*R*kdeg*kel*kon^2 - 4*L.^2.*R*kdeg*koff*kon^2 - L.^2.*R*kint*koff*kon^2 - L.^2.*R*koff^2*kon^2 + ...
            2*ksyn*L.^2.*R*kon^3 + 3*L.^2.*RL*kdeg*koff*kon^2 + L.^2.*RL*kel*koff*kon^2 + L.^2.*RL*kint*koff*kon^2 + ...
            2*L.^2.*RL*koff^2*kon^2 + 3*ksyn*L.^2*kdeg*kon^2 + ksyn*L.^2*kel*kon^2 + ksyn*L.^2*koff*kon^2 - ...
            L.*R.^3*kdeg*kon^3 - L.*R.^2.*RL*koff*kon^3 - 3*L.*R.^2*kdeg^2*kon^2 - 2*L.*R.^2*kdeg*kel*kon^2 - ...
            2*L.*R.^2*kdeg*koff*kon^2 + 6*L.*R.*RL*kdeg*koff*kon^2 - L.*R.*RL*kel*koff*kon^2 - 4*L.*R*kdeg^3*kon - ...
            2*L.*R*kdeg^2*kel*kon - 2*L.*R*kdeg^2*koff*kon - L.*R*kdeg*kel^2*kon - L.*R*kdeg*kel*koff*kon - ...
            L.*R*kdeg*kint*koff*kon - L.*R*kdeg*koff^2*kon + 2*ksyn*L.*R*kdeg*kon^2 - L.*RL.^2*koff^2*kon^2 + ...
            3*L.*RL*kdeg^2*koff*kon + L.*RL*kdeg*kel*koff*kon + 2*L.*RL*kdeg*kint*koff*kon + 3*L.*RL*kdeg*koff^2*kon - ...
            L.*RL*kel*kint*koff*kon - L.*RL*kel*koff^2*kon + L.*RL*kint^2*koff*kon + 2*L.*RL*kint*koff^2*kon + ...
            L.*RL*koff^3*kon - ksyn*L.*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + ...
            R.^2.*RL*kdeg*koff*kon^2 + R.*RL.^2*koff^2*kon^2 + 2*R.*RL*kdeg^2*koff*kon + R.*RL*kdeg*kel*koff*kon + ...
            R.*RL*kdeg*kint*koff*kon + 2*R.*RL*kdeg*koff^2*kon - R*kdeg^4 - RL.^2*kdeg*koff^2*kon + RL.^2*kint*koff^2*kon + ...
            RL.^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + ...
            2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))./((kdeg + L*kon).*(kdeg^4 + ...
            L.^4*kon^4 + 3*L.^3.*R*kon^4 + 4*L.^3*kdeg*kon^3 + 2*L.^3*koff*kon^3 - L.^2*kon^3*ksyn + 6*L.^2*kdeg^2*kon^2 + ...
            L.^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + ...
            3*L.*R*kdeg^2*kon^2 + L.*R.^2*kdeg*kon^3 + 6*L.^2.*R*kdeg*kon^3 + L.^2.*R*koff*kon^3 + L.*RL*koff^2*kon^2 - ...
            L.^2.*RL*koff*kon^3 + 4*L.^2*kdeg*koff*kon^2 - L.^2*kel*koff*kon^2 + L.^2*kint*koff*kon^2 + ...
            L*kdeg*kint*koff*kon + L.*R.*RL*koff*kon^3 + L.*R*kdeg*kel*kon^2 + 2*L.*R*kdeg*koff*kon^2 - ...
            L.*RL*kdeg*koff*kon^2));
    %
    CSPR21_SIM_dR = (L*kon^2*(- L^4*R*kon^4 - 3*L^3*R^2*kon^4 - 4*L^3*R*kdeg*kon^3 - 2*L^3*R*kel*kon^3 - ...
        2*L^3*R*koff*kon^3 + L^3*RL*koff*kon^3 + ksyn*L^3*kon^3 - 6*L^2*R^2*kdeg*kon^3 - L^2*R^2*koff*kon^3 + ...
        4*L^2*R*RL*koff*kon^3 - 6*L^2*R*kdeg^2*kon^2 - 4*L^2*R*kdeg*kel*kon^2 - 4*L^2*R*kdeg*koff*kon^2 - ...
        L^2*R*kint*koff*kon^2 - L^2*R*koff^2*kon^2 + 2*ksyn*L^2*R*kon^3 + 3*L^2*RL*kdeg*koff*kon^2 + ...
        L^2*RL*kel*koff*kon^2 + L^2*RL*kint*koff*kon^2 + 2*L^2*RL*koff^2*kon^2 + 3*ksyn*L^2*kdeg*kon^2 + ...
        ksyn*L^2*kel*kon^2 + ksyn*L^2*koff*kon^2 - L*R^3*kdeg*kon^3 - L*R^2*RL*koff*kon^3 - 3*L*R^2*kdeg^2*kon^2 - ...
        2*L*R^2*kdeg*kel*kon^2 - 2*L*R^2*kdeg*koff*kon^2 + 6*L*R*RL*kdeg*koff*kon^2 - L*R*RL*kel*koff*kon^2 - ...
        4*L*R*kdeg^3*kon - 2*L*R*kdeg^2*kel*kon - 2*L*R*kdeg^2*koff*kon - L*R*kdeg*kel^2*kon - L*R*kdeg*kel*koff*kon - ...
        L*R*kdeg*kint*koff*kon - L*R*kdeg*koff^2*kon + 2*ksyn*L*R*kdeg*kon^2 - L*RL^2*koff^2*kon^2 + ...
        3*L*RL*kdeg^2*koff*kon + L*RL*kdeg*kel*koff*kon + 2*L*RL*kdeg*kint*koff*kon + 3*L*RL*kdeg*koff^2*kon - ...
        L*RL*kel*kint*koff*kon - L*RL*kel*koff^2*kon + L*RL*kint^2*koff*kon + 2*L*RL*kint*koff^2*kon + L*RL*koff^3*kon - ...
        ksyn*L*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ksyn*L*kdeg*koff*kon + R^2*RL*kdeg*koff*kon^2 + ...
        R*RL^2*koff^2*kon^2 + 2*R*RL*kdeg^2*koff*kon + R*RL*kdeg*kel*koff*kon + R*RL*kdeg*kint*koff*kon + ...
        2*R*RL*kdeg*koff^2*kon - R*kdeg^4 - RL^2*kdeg*koff^2*kon + RL^2*kint*koff^2*kon + RL^2*koff^3*kon + ...
        RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + ...
        RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))/((kdeg + L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + ...
        4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + 6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + ...
        L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + ...
        6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - ...
        L^2*kel*koff*kon^2 + L^2*kint*koff*kon^2 + L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + ...
        2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)) - ((L^2*kon^2 + 2*L*kdeg*kon + R*L*kon^2 + koff*L*kon + ...
        kdeg^2)*(L^4*kon^4 + 6*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*kel*kon^3 + 2*L^3*koff*kon^3 + 12*L^2*R*kdeg*kon^3 + ...
        2*L^2*R*koff*kon^3 - 4*L^2*RL*koff*kon^3 + 6*L^2*kdeg^2*kon^2 + 4*L^2*kdeg*kel*kon^2 + 4*L^2*kdeg*koff*kon^2 + ...
        L^2*koff^2*kon^2 + kint*L^2*koff*kon^2 - 2*ksyn*L^2*kon^3 + 3*L*R^2*kdeg*kon^3 + 2*L*R*RL*koff*kon^3 + ...
        6*L*R*kdeg^2*kon^2 + 4*L*R*kdeg*kel*kon^2 + 4*L*R*kdeg*koff*kon^2 - 6*L*RL*kdeg*koff*kon^2 + L*RL*kel*koff*kon^2 + ...
        4*L*kdeg^3*kon + 2*L*kdeg^2*kel*kon + 2*L*kdeg^2*koff*kon + L*kdeg*kel^2*kon + L*kdeg*kel*koff*kon + ...
        L*kdeg*koff^2*kon + kint*L*kdeg*koff*kon - 2*ksyn*L*kdeg*kon^2 - 2*R*RL*kdeg*koff*kon^2 - RL^2*koff^2*kon^2 - ...
        2*RL*kdeg^2*koff*kon - RL*kdeg*kel*koff*kon - 2*RL*kdeg*koff^2*kon - kint*RL*kdeg*koff*kon + kdeg^4))/((kdeg + ...
        L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + ...
        6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - ...
        L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + ...
        L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + L^2*kint*koff*kon^2 + ...
        L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)) - ...
        (L*kon^2*(L^2*kon^2 + 2*L*kdeg*kon + R*L*kon^2 + koff*L*kon + kdeg^2)*(kdeg*kel + 2*kdeg*koff + 3*kdeg^2 + ...
        3*L^2*kon^2 + 6*L*kdeg*kon + L*koff*kon + 2*R*kdeg*kon + RL*koff*kon)*(- L^4*R*kon^4 - 3*L^3*R^2*kon^4 - ...
        4*L^3*R*kdeg*kon^3 - 2*L^3*R*kel*kon^3 - 2*L^3*R*koff*kon^3 + L^3*RL*koff*kon^3 + ksyn*L^3*kon^3 - ...
        6*L^2*R^2*kdeg*kon^3 - L^2*R^2*koff*kon^3 + 4*L^2*R*RL*koff*kon^3 - 6*L^2*R*kdeg^2*kon^2 - 4*L^2*R*kdeg*kel*kon^2 - ...
        4*L^2*R*kdeg*koff*kon^2 - L^2*R*kint*koff*kon^2 - L^2*R*koff^2*kon^2 + 2*ksyn*L^2*R*kon^3 + ...
        3*L^2*RL*kdeg*koff*kon^2 + L^2*RL*kel*koff*kon^2 + L^2*RL*kint*koff*kon^2 + 2*L^2*RL*koff^2*kon^2 + ...
        3*ksyn*L^2*kdeg*kon^2 + ksyn*L^2*kel*kon^2 + ksyn*L^2*koff*kon^2 - L*R^3*kdeg*kon^3 - L*R^2*RL*koff*kon^3 - ...
        3*L*R^2*kdeg^2*kon^2 - 2*L*R^2*kdeg*kel*kon^2 - 2*L*R^2*kdeg*koff*kon^2 + 6*L*R*RL*kdeg*koff*kon^2 - ...
        L*R*RL*kel*koff*kon^2 - 4*L*R*kdeg^3*kon - 2*L*R*kdeg^2*kel*kon - 2*L*R*kdeg^2*koff*kon - L*R*kdeg*kel^2*kon - ...
        L*R*kdeg*kel*koff*kon - L*R*kdeg*kint*koff*kon - L*R*kdeg*koff^2*kon + 2*ksyn*L*R*kdeg*kon^2 - ...
        L*RL^2*koff^2*kon^2 + 3*L*RL*kdeg^2*koff*kon + L*RL*kdeg*kel*koff*kon + 2*L*RL*kdeg*kint*koff*kon + ...
        3*L*RL*kdeg*koff^2*kon - L*RL*kel*kint*koff*kon - L*RL*kel*koff^2*kon + L*RL*kint^2*koff*kon + ...
        2*L*RL*kint*koff^2*kon + L*RL*koff^3*kon - ksyn*L*RL*koff*kon^2 + 3*ksyn*L*kdeg^2*kon + ksyn*L*kdeg*kel*kon + ...
        ksyn*L*kdeg*koff*kon + R^2*RL*kdeg*koff*kon^2 + R*RL^2*koff^2*kon^2 + 2*R*RL*kdeg^2*koff*kon + ...
        R*RL*kdeg*kel*koff*kon + R*RL*kdeg*kint*koff*kon + 2*R*RL*kdeg*koff^2*kon - R*kdeg^4 - RL^2*kdeg*koff^2*kon + ...
        RL^2*kint*koff^2*kon + RL^2*koff^3*kon + RL*kdeg^3*koff + RL*kdeg^2*kint*koff + RL*kdeg^2*koff^2 + ...
        RL*kdeg*kint^2*koff + 2*RL*kdeg*kint*koff^2 + RL*kdeg*koff^3 - ksyn*RL*kdeg*koff*kon + ksyn*kdeg^3))/((kdeg + ...
        L*kon)*(kdeg^4 + L^4*kon^4 + 3*L^3*R*kon^4 + 4*L^3*kdeg*kon^3 + 2*L^3*koff*kon^3 - L^2*kon^3*ksyn + ...
        6*L^2*kdeg^2*kon^2 + L^2*koff^2*kon^2 + 4*L*kdeg^3*kon + L*kdeg*koff^2*kon + 2*L*kdeg^2*koff*kon - ...
        L*kdeg*kon^2*ksyn + 3*L*R*kdeg^2*kon^2 + L*R^2*kdeg*kon^3 + 6*L^2*R*kdeg*kon^3 + L^2*R*koff*kon^3 + ...
        L*RL*koff^2*kon^2 - L^2*RL*koff*kon^3 + 4*L^2*kdeg*koff*kon^2 - L^2*kel*koff*kon^2 + L^2*kint*koff*kon^2 + ...
        L*kdeg*kint*koff*kon + L*R*RL*koff*kon^3 + L*R*kdeg*kel*kon^2 + 2*L*R*kdeg*koff*kon^2 - L*RL*kdeg*koff*kon^2)^2);
end

% CSPRL21 solved for R
function [CSPRL21_SIM, CSPRL21_SIM_dR] = CSPRL21_impR(xFast,ySlow,pars)
    kon = pars(1);
    koff = pars(2);
    kel = pars(3);
    ksyn = pars(4);
    kdeg = pars(5);
    kint = pars(6);
    % in this case 
    R = xFast;
    L = ySlow(1,:);
    RL = ySlow(2,:);
    % 
    CSPRL21_SIM = ((2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon).*(L.^3.*R*kon^3 + 4*L.^2.*R.^2*kon^3 + ...
        2*L.^2.*R*kdeg*kon^2 + 3*L.^2.*R*kel*kon^2 + L.^2.*R*kint*kon^2 + 2*L.^2.*R*koff*kon^2 - L.^2.*RL*koff*kon^2 - ...
        ksyn*L.^2*kon^2 + L.*R.^3*kon^3 + 3*L.*R.^2*kdeg*kon^2 + 2*L.*R.^2*kel*kon^2 + L.*R.^2*kint*kon^2 + ...
        2*L.*R.^2*koff*kon^2 - 6*L.*R.*RL*koff*kon^2 + L.*R*kdeg^2*kon + 2*L.*R*kdeg*kel*kon + L.*R*kdeg*kint*kon + ...
        L.*R*kdeg*koff*kon + L.*R*kel^2*kon + L.*R*kel*kint*kon + L.*R*kel*koff*kon + L.*R*kint^2*kon + ...
        2*L.*R*kint*koff*kon + L.*R*koff^2*kon - 3*ksyn*L.*R*kon^2 - L.*RL*kdeg*koff*kon - 2*L.*RL*kel*koff*kon - ...
        2*L.*RL*kint*koff*kon - 2*L.*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ...
        ksyn*L*koff*kon - R.^2.*RL*koff*kon^2 - 2*R.*RL*kdeg*koff*kon - R.*RL*kel*koff*kon - 2*R.*RL*kint*koff*kon - ...
        2*R.*RL*koff^2*kon + 2*RL.^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + ...
        2*ksyn*RL*koff*kon))./((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L.^2*koff*kon^2 + ...
        R.^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L.*R*koff*kon^2 + ...
        L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon));
   %     
    CSPRL21_SIM_dR = (kon*(2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon)*(L^3*kon^2 + 8*L^2*R*kon^2 + ...
        2*L^2*kdeg*kon + 3*L^2*kel*kon + L^2*kint*kon + 2*L^2*koff*kon + 3*L*R^2*kon^2 + 6*L*R*kdeg*kon + 4*L*R*kel*kon + ...
        2*L*R*kint*kon + 4*L*R*koff*kon + L*kdeg^2 + 2*L*kdeg*kel + L*kdeg*kint + L*kdeg*koff + L*kel^2 + L*kel*kint + ...
        L*kel*koff + L*kint^2 + 2*L*kint*koff + L*koff^2 - 6*RL*L*koff*kon - 3*ksyn*L*kon - 2*RL*R*koff*kon - ...
        2*RL*kdeg*koff - RL*kel*koff - 2*RL*kint*koff - 2*RL*koff^2))/((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + ...
        kint^3 + koff^3 + L^2*koff*kon^2 + R^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - ...
        2*RL*koff^2*kon + 4*L*R*koff*kon^2 + L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + ...
        R*kel*koff*kon + 2*R*kint*koff*kon)) + (koff*kon*(L^3*R*kon^3 + 4*L^2*R^2*kon^3 + 2*L^2*R*kdeg*kon^2 + ...
        3*L^2*R*kel*kon^2 + L^2*R*kint*kon^2 + 2*L^2*R*koff*kon^2 - L^2*RL*koff*kon^2 - ksyn*L^2*kon^2 + L*R^3*kon^3 + ...
        3*L*R^2*kdeg*kon^2 + 2*L*R^2*kel*kon^2 + L*R^2*kint*kon^2 + 2*L*R^2*koff*kon^2 - 6*L*R*RL*koff*kon^2 + ...
        L*R*kdeg^2*kon + 2*L*R*kdeg*kel*kon + L*R*kdeg*kint*kon + L*R*kdeg*koff*kon + L*R*kel^2*kon + L*R*kel*kint*kon + ...
        L*R*kel*koff*kon + L*R*kint^2*kon + 2*L*R*kint*koff*kon + L*R*koff^2*kon - 3*ksyn*L*R*kon^2 - L*RL*kdeg*koff*kon - ...
        2*L*RL*kel*koff*kon - 2*L*RL*kint*koff*kon - 2*L*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ...
        ksyn*L*kint*kon - ksyn*L*koff*kon - R^2*RL*koff*kon^2 - 2*R*RL*kdeg*koff*kon - R*RL*kel*koff*kon - ...
        2*R*RL*kint*koff*kon - 2*R*RL*koff^2*kon + 2*RL^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - ...
        RL*koff^3 + 2*ksyn*RL*koff*kon))/((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L^2*koff*kon^2 + ...
        R^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L*R*koff*kon^2 + ...
        L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon)) - ...
        (koff*kon*(2*kint*koff + kint^2 + koff^2 + L*koff*kon + R*koff*kon)*(kdeg + kel + 2*kint + 2*koff + 4*L*kon + ...
        2*R*kon)*(L^3*R*kon^3 + 4*L^2*R^2*kon^3 + 2*L^2*R*kdeg*kon^2 + 3*L^2*R*kel*kon^2 + L^2*R*kint*kon^2 + ...
        2*L^2*R*koff*kon^2 - L^2*RL*koff*kon^2 - ksyn*L^2*kon^2 + L*R^3*kon^3 + 3*L*R^2*kdeg*kon^2 + 2*L*R^2*kel*kon^2 + ...
        L*R^2*kint*kon^2 + 2*L*R^2*koff*kon^2 - 6*L*R*RL*koff*kon^2 + L*R*kdeg^2*kon + 2*L*R*kdeg*kel*kon + ...
        L*R*kdeg*kint*kon + L*R*kdeg*koff*kon + L*R*kel^2*kon + L*R*kel*kint*kon + L*R*kel*koff*kon + L*R*kint^2*kon + ...
        2*L*R*kint*koff*kon + L*R*koff^2*kon - 3*ksyn*L*R*kon^2 - L*RL*kdeg*koff*kon - 2*L*RL*kel*koff*kon - ...
        2*L*RL*kint*koff*kon - 2*L*RL*koff^2*kon - ksyn*L*kdeg*kon - 2*ksyn*L*kel*kon - ksyn*L*kint*kon - ...
        ksyn*L*koff*kon - R^2*RL*koff*kon^2 - 2*R*RL*kdeg*koff*kon - R*RL*kel*koff*kon - 2*R*RL*kint*koff*kon - ...
        2*R*RL*koff^2*kon + 2*RL^2*koff^2*kon - RL*kint^3 - 3*RL*kint^2*koff - 3*RL*kint*koff^2 - RL*koff^3 + ...
        2*ksyn*RL*koff*kon))/((kint + koff)*(3*kint*koff^2 + 3*kint^2*koff + kint^3 + koff^3 + L^2*koff*kon^2 + ...
        R^2*koff*kon^2 - koff*kon*ksyn + 2*L*koff^2*kon + 2*R*koff^2*kon - 2*RL*koff^2*kon + 4*L*R*koff*kon^2 + ...
        L*kdeg*koff*kon + L*kel*koff*kon + 2*L*kint*koff*kon + R*kdeg*koff*kon + R*kel*koff*kon + 2*R*kint*koff*kon)^2);

end